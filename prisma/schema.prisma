// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Guild {
  id     BigInt  @id
  unfurl Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  connections Connection[]
  projects    Project[]
}

model Install {
  id           String  @id
  token        String
  refreshToken String
  debug        Boolean @default(false)

  connections Connection[]
  events      StoredEvent[]
}

model Connection {
  id        Int     @id @default(autoincrement())
  guild     Guild   @relation(fields: [guildId], references: [id])
  guildId   BigInt
  install   Install @relation(fields: [installId], references: [id])
  installId String
  uuid      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([uuid, guildId, installId])
}

model Project {
  id      Int    @id @default(autoincrement())
  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId BigInt

  message    String?
  stacktrace Boolean @default(true)
  filterTags Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags   Tag[]
  events Event[]

  @@index([guildId])
}

model Tag {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
  name      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, name])
  @@index([projectId])
}

model StoredEvent {
  id        Int     @id @default(autoincrement())
  install   Install @relation(fields: [installId], references: [id])
  installId String

  event      Json
  submitted  Boolean  @default(false)
  successful Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([installId])
}

model Event {
  id        Int     @id @default(autoincrement())
  platform  String
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([platform])
}

// Legacy Models

// Holdover webhooks from version 1; don't add new records,
// delete when we hit 0 (maybe not records, but queries over n days)
// If deleted before 404 check, post one last deprecation notice
model LegacyWebhook {
  id  Int    @id @default(autoincrement())
  key String @unique
  url String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([url])
}
